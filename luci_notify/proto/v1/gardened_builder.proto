// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.notify.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/luci_notify/proto/v1/triage_state.proto";

option go_package = "go.chromium.org/luci/luci_notify/proto/v1;notifypb";


// GardenedBuilder represents information needed to monitor a buildbucket Builder
// and return it to passing if it is failing.
message GardenedBuilder {
  // Resource name of the builder.
  // Format: project/{PROJECT}/buckets/{BUCKET}/builder/{BUILDER}/gardening.
  string name = 1;

  // Builder identifier.
  BuilderID builder_id = 2 [(google.api.field_behavior) = IMMUTABLE];

  // Recent results for the builder.
  // Up to the last 100 commit positions.
  repeated BuildSummary latest_results = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Up to 10 further builds after the latest_results. This may include running builds.
  repeated BuildSummary further_results = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Steps on the builder which are failing, or
  // were recently failing. I.E. "interesting" steps.
  // This is limited to 40 items.
  repeated GardenedBuilderStep steps = 5;
}

// BuildSummary captures the status of a build.
message BuildSummary {
  // The build the result was obtained for.
  BuildRef build = 1;

  // The status of the build or step.
  BuildStatus status = 2;

  // The build creation time.
  google.protobuf.Timestamp creation_time = 3;

  // The build summary markdown.
  string summary_markdown = 4;
}

// BuildRef represents a reference to a build.
message BuildRef {
  // The buildbucket build identifier.
  int64 buildbucket_build_id = 1;

  // The version of sources included in the build.
  // May be empty if unavailable.
  int64 commit_position = 2;
}

// BuildStatus captures the status of a build.
enum BuildStatus {
  // A build or step must not have this status.
  BUILD_STATUS_UNSPECIFIED = 0;
  // A build was scheduled, but did not start yet.
  BUILD_STATUS_SCHEDULED = 1;
  // A build has started.
  BUILD_STATUS_STARTED = 2;
  // A build/step ended successfully.
  BUILD_STATUS_SUCCESS = 12;
  // A build/step ended unsuccessfully due to its Build.Input,
  // e.g. tests failed, and NOT due to a build infrastructure failure.
  BUILD_STATUS_FAILURE = 20;
  // A build ended unsuccessfully due to a failure independent of the
  // input, e.g. swarming failed, not enough capacity or the recipe was unable
  // to read the patch from gerrit.
  BUILD_STATUS_INFRA_FAILURE = 36;
  // A build was cancelled explicitly, e.g. via an RPC.
  BUILD_STATUS_CANCELED = 68;
}

// BuilderID identifies a builder.
message BuilderID {
  // The LUCI Project of the builder. E.g. "chromium".
  string project = 1;

  // The build bucket, e.g. "try". Unique within project.
  string bucket = 2;

  // The builder name, e.g. "linux-rel". Unique within bucket.
  string builder = 3;
}

// GardenedBuilderStep represents information needed to monitor a buildbucket Builder step
// and return it to passing if it is failing.
message GardenedBuilderStep {
  // The step identifier.
  // Pipe character ("|") is reserved to separate parent and child step names.
  // For example, value "a|b" indicates step "b" under step "a".
  //
  // Pseudosteps (fake steps generated by the server) will start with the prefix
  // "$pseudostep-". The following psudosteps currently exist:
  // - "$pseudostep-build-failure": for build failures not explained
  //   by a step.
  // - "$pseudostep-tests": for test failures not under an actual step.
  string step_id = 1 [(google.api.field_behavior) = IMMUTABLE];

  // User-editable triage state.
  TriageState triage_state = 2;

  // Describes information about the last time the step started failing.
  // Includes whether the failure is consistent (or resolved), the blamelist, etc.
  Regression last_regression = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The last build with a (non-pending) result for this step.
  // At present, this is the same as the last completed (or cancelled) build
  // although if we ever started ingesting builds prior to completion this
  // could include running builds which already have a result for this step.
  //
  // Use in conjunction with triage_state.snooze.snoozed_buildbucket_build_id
  // to identify when a snooze has expired.
  BuildRef last_build = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // StepStatus captures the status of a step.
  enum StepStatus {
    // A build or step must not have this status.
    STEP_STATUS_UNSPECIFIED = 0;
    // The build is still running and there is no data available
    // for the step yet.
    PENDING = 1;
    // The step was not run in the build, but the build succeeded.
    // This is best treated as a type of success, as some steps
    // only show up to report a failure.
    NOT_RUN_BUILD_SUCCESS = 2;
    // The step was not run in the build, and the build failed,
    // infra failed or was cancelled. In this case, it is ambiguous
    // if the step did not run because of the earlier failure or
    // the cancellation or if the step only shows up on failures and
    // the failure did not occur.
    NOT_RUN_BUILD_NON_SUCCESS = 3;
    // The step succeeded.
    SUCCESS = 4;
    // The step failed.
    FAILURE = 5;
    // The step encountered an infrastructure failure.
    INFRA_FAILURE = 6;
    // The step was canceled.
    CANCELED = 7;
  }

  // Recent builds for the step, comprising up to the last 100 commit positions.
  // This may include running builds.
  // Matches 1:1 with the list on the parent GardenedBuilder.
  // Build IDs and commit positions can be found on the parent.
  repeated StepStatus latest_results = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Up to 10 further builds of running data after the latest_results.
  // This may include running builds.
  // Matches 1:1 with the list on the parent GardenedBuilder.
  // Build IDs and commit positions can be found on the parent.
  repeated StepStatus further_results = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Failing or recently failing tests that are part of the step. This list is
  // limited to 40 items.
  repeated GardenedTest tests = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GardenedTest {
  // The identifier of the test.
  string test_id = 1;

  // The test variant hash.
  string variant_hash = 2;

  // User-editable triage state.
  TriageState triage_state = 3;

  // Describes information about the last time the step started failing.
  // Includes whether the failure is consistent (or resolved), the blamelist, etc.
  Regression last_regression = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The last build with a (non-pending) result for this test.
  // This is the same as the last completed (or cancelled) build.
  //
  // Use in conjunction with triage_state.snooze.snoozed_buildbucket_build_id
  // to identify when a snooze has expired.
  BuildRef last_build = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Status of a test verdict.
  enum TestStatus {
    // This status should not be used.
    TEST_STATUS_UNSPECIFIED = 0;
    // The build is still running and there is no data available
    // for the test yet.
    PENDING = 1;
    // There is no result for the test in the build.
    NOT_RUN = 2;
    // The test verdict in the build was expected.
    // This is considered a passing state for the purposes of regression
    // analysis.
    EXPECTED = 3;
    // The test verdict in the build was flaky.
    // This is considered a passing state for the purposes of regression
    // analysis.
    FLAKY = 4;
    // The test verdict in the build was exonerated.
    // This is considered a passing state for the purposes of regression
    // analysis.
    EXONERATED = 5;
    // The test verdict in the build was unexpected.
    // This is considered a failing state for the purposes of regression
    // analysis.
    UNEXPECTED = 6;
    // The test verdict in the build was unexpectedly skipped.
    // This is considered a failing state for the purposes of regression
    // analysis.
    UNEXPECTEDLY_SKIPPED = 7;
  }

  // Recent results for the test, comprising up to the last 100 commit positions.
  // This may include running builds.
  // Matches 1:1 with the list on the parent GardenedBuilder.
  // Build ID and commit positions corresponding to each status can be
  // found on the parent.
  repeated TestStatus latest_results = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Up to 10 further results of the test after the latest_results.
  // This may include running builds.
  // Matches 1:1 with the list on the parent GardenedBuilder.
  // Build ID and commit positions corresponding to each status can be
  // found on the parent.
  repeated TestStatus further_results = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Regression contains information about a time a step or test encountered
// a sequence of one or more failures.
//
// A sequence of failures is only broken by a pass. There are also ignored
// states, which capture cases where a build does not produce a result for
// a step/test. As the name suggests, these states are ignored and do not
// break a run of failures.
//
// Passing, failing and ignored states are defined as follows:
// - Steps (see StepStatus):
//   - Passing: SUCCESS, NOT_RUN_BUILD_SUCCESS.
//   - Failing: FAILURE, INFRA_FAILURE
//   - Ignored: NOT_RUN_BUILD_NON_SUCCESS, CANCELED
// - Tests (see TestStatus):
//   - Passing: Expected, Flaky, Exonerated
//   - Failing: Unexpected, Unexpectedly Skipped.
//   - Ignored: Not run, Pending.
//
// A sequence typically starts when a step or test transitions from a
// passing state to a failing state. A sequence may also start if the step
// or test fails and that is the first non-ignored result for the step or test.
message Regression {
  // A unique identifier the last regression (unique only within
  // the context of the containing step or test).
  // Use in conjunction with triage_state.bug_regression_id to identify stale
  // bug associations.
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Whether the alert is new, consistent or resolved.
  // The following invariants hold:
  // If first_resolved_build is set, the state will be RESOLVED.
  // Otherwise, if total_failing_builds >= 2, the state will be CONSISTENT.
  // Otherwise, the state will be NEW.
  RegressionStatus status = 2;

  // The last build the step passed on prior to the first failure covered by
  // this alert. This may not be set if, e.g. the builder was failing since
  // its inception.
  // For the purposes of this field, a step passes on a build it passed on
  // or a build that passes, even if it did not contain the step.
  BuildRef last_passing_build = 3;

  // The first failing build. Note this may
  // not be the build immediately consecutive to the last passing build, as
  // there may be intervening canceled builds.
  BuildRef first_failing_build = 4;

  // The last failing build. This may be the same as the first failing build.
  BuildRef last_failing_build = 5;

  // The total number of failing builds between the first and last failing
  // build. This is different to the number of builds between the first and
  // last failing build as it excludes builds with an ignored result
  // for this step/test. See Regression message for details of what statuses
  // are ignored.
  int64 total_builds_with_failures = 6;

  // The first build in which the issue was resolved. Set for resolved alerts only.
  BuildRef first_resolved_build = 7;

  // The start time of the last build with a passing or failing result for this step/test.
  // See comments on `Regression` message for definition of passing and failing.
  // Supports verification of fixes.
  google.protobuf.Timestamp last_actual_result_build_start_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Whether the last passing or failing result (i.e. non-ignored result)
  // for this step/test was a passing result.
  // See comments on `Regression` message for definition of passing and failing.
  // Supports verification of fixes.
  bool was_last_actual_result_pass = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
}

enum RegressionStatus {
  // This value should not be used.
  REGRESSION_STATUS_UNSPECIFIED = 0;
  // There has been one occurrence of the failure so far.
  REGRESSION_STATUS_NEW = 1;
  // There are two or more occurrences of the failure and the regression appears
  // consistent.
  REGRESSION_STATUS_CONSISTENT = 2;
  // The regression has been resolved.
  REGRESSION_STATUS_RESOLVED = 3;
}
