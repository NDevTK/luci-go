// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: infra/fleetconsole/api/fleetconsolerpc/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "fleetconsole";

/** PingRequest intentionally contains nothing. */
export interface PingRequest {
}

/** PingResponse intentionally contains nothing. */
export interface PingResponse {
}

/** PingDeviceManagerRequest intentionally contains nothing. */
export interface PingDeviceManagerRequest {
}

/** PingDeviceManagerResponse intentionally contains nothing. */
export interface PingDeviceManagerResponse {
}

function createBasePingRequest(): PingRequest {
  return {};
}

export const PingRequest: MessageFns<PingRequest> = {
  encode(_: PingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PingRequest {
    return {};
  },

  toJSON(_: PingRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PingRequest>): PingRequest {
    return PingRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PingRequest>): PingRequest {
    const message = createBasePingRequest() as any;
    return message;
  },
};

function createBasePingResponse(): PingResponse {
  return {};
}

export const PingResponse: MessageFns<PingResponse> = {
  encode(_: PingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PingResponse {
    return {};
  },

  toJSON(_: PingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PingResponse>): PingResponse {
    return PingResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PingResponse>): PingResponse {
    const message = createBasePingResponse() as any;
    return message;
  },
};

function createBasePingDeviceManagerRequest(): PingDeviceManagerRequest {
  return {};
}

export const PingDeviceManagerRequest: MessageFns<PingDeviceManagerRequest> = {
  encode(_: PingDeviceManagerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingDeviceManagerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingDeviceManagerRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PingDeviceManagerRequest {
    return {};
  },

  toJSON(_: PingDeviceManagerRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PingDeviceManagerRequest>): PingDeviceManagerRequest {
    return PingDeviceManagerRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PingDeviceManagerRequest>): PingDeviceManagerRequest {
    const message = createBasePingDeviceManagerRequest() as any;
    return message;
  },
};

function createBasePingDeviceManagerResponse(): PingDeviceManagerResponse {
  return {};
}

export const PingDeviceManagerResponse: MessageFns<PingDeviceManagerResponse> = {
  encode(_: PingDeviceManagerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingDeviceManagerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingDeviceManagerResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PingDeviceManagerResponse {
    return {};
  },

  toJSON(_: PingDeviceManagerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PingDeviceManagerResponse>): PingDeviceManagerResponse {
    return PingDeviceManagerResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PingDeviceManagerResponse>): PingDeviceManagerResponse {
    const message = createBasePingDeviceManagerResponse() as any;
    return message;
  },
};

export interface FleetConsole {
  /** Ping does not send or receive any information. It just checks that the service is there. */
  Ping(request: PingRequest): Promise<PingResponse>;
  /** PingDeviceManager attempts to contact DeviceManager through Fleet Console. Useful for debugging. */
  PingDeviceManager(request: PingDeviceManagerRequest): Promise<PingDeviceManagerResponse>;
}

export const FleetConsoleServiceName = "fleetconsole.FleetConsole";
export class FleetConsoleClientImpl implements FleetConsole {
  static readonly DEFAULT_SERVICE = FleetConsoleServiceName;
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || FleetConsoleServiceName;
    this.rpc = rpc;
    this.Ping = this.Ping.bind(this);
    this.PingDeviceManager = this.PingDeviceManager.bind(this);
  }
  Ping(request: PingRequest): Promise<PingResponse> {
    const data = PingRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "Ping", data);
    return promise.then((data) => PingResponse.fromJSON(data));
  }

  PingDeviceManager(request: PingDeviceManagerRequest): Promise<PingDeviceManagerResponse> {
    const data = PingDeviceManagerRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "PingDeviceManager", data);
    return promise.then((data) => PingDeviceManagerResponse.fromJSON(data));
  }
}

interface Rpc {
  request(service: string, method: string, data: unknown): Promise<unknown>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
